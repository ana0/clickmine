ImportDirective "./StandardToken.sol"
   Source: "import \"./StandardToken.sol\";"
ImportDirective "./Registrar.sol"
   Source: "import \"./Registrar.sol\";"
PragmaDirective
   Source: "pragma solidity ^0.4.15;"
ContractDefinition "ClickMineToken"
   Source: "contract ClickMineToken is StandardToken, mortal {\n\n    /* Public variables of the token */\n\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol;                 //An identifier: eg SBX\n\n    function ClickMineToken(string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public\n    {\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /* Approves and then calls the receiving contract */\n    // function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) \n    // {\n    //     allowed[msg.sender][_spender] = _value;\n    //     Approval(msg.sender, _spender, _value);\n\n    //     //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n    //     //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n    //     //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n    //     require(_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n    //     return true;\n    // }\n\n    function mint(address _to, uint256 _value) internal returns (bool success)\n    {\n        require(balances[_to] + _value > balances[_to]);\n        balances[_to] += _value;\n        allowed[_to][this] += _value;\n        Transfer(0x0000000000000000000000000000000000000000, _to, _value);\n        Approval(_to, this, _value);\n        return true;\n    }\n}"
  InheritanceSpecifier
     Source: "StandardToken"
    UserDefinedTypeName "StandardToken"
       Source: "StandardToken"
  InheritanceSpecifier
     Source: "mortal"
    UserDefinedTypeName "mortal"
       Source: "mortal"
  VariableDeclaration "name"
     Type: string storage ref
     Source: "string public name"
    ElementaryTypeName string
       Source: "string"
  VariableDeclaration "decimals"
     Type: uint8
     Source: "uint8 public decimals"
    ElementaryTypeName uint8
       Source: "uint8"
  VariableDeclaration "symbol"
     Type: string storage ref
     Source: "string public symbol"
    ElementaryTypeName string
       Source: "string"
  FunctionDefinition "ClickMineToken" - public
     Source: "function ClickMineToken(string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public\n    {\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n    }"
    ParameterList
       Source: "(string _tokenName, uint8 _decimalUnits, string _tokenSymbol)"
      VariableDeclaration "_tokenName"
         Type: string memory
         Source: "string _tokenName"
        ElementaryTypeName string
           Source: "string"
      VariableDeclaration "_decimalUnits"
         Type: uint8
         Source: "uint8 _decimalUnits"
        ElementaryTypeName uint8
           Source: "uint8"
      VariableDeclaration "_tokenSymbol"
         Type: string memory
         Source: "string _tokenSymbol"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Source: ""
    Block
       Source: "{\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n    }"
      ExpressionStatement
         Source: "name = _tokenName"
        Assignment using operator =
           Type: string storage ref
           Source: "name = _tokenName"
          Identifier name
             Type: string storage ref
             Source: "name"
          Identifier _tokenName
             Type: string memory
             Source: "_tokenName"
      ExpressionStatement
         Source: "decimals = _decimalUnits"
        Assignment using operator =
           Type: uint8
           Source: "decimals = _decimalUnits"
          Identifier decimals
             Type: uint8
             Source: "decimals"
          Identifier _decimalUnits
             Type: uint8
             Source: "_decimalUnits"
      ExpressionStatement
         Source: "symbol = _tokenSymbol"
        Assignment using operator =
           Type: string storage ref
           Source: "symbol = _tokenSymbol"
          Identifier symbol
             Type: string storage ref
             Source: "symbol"
          Identifier _tokenSymbol
             Type: string memory
             Source: "_tokenSymbol"
  FunctionDefinition "mint"
     Source: "function mint(address _to, uint256 _value) internal returns (bool success)\n    {\n        require(balances[_to] + _value > balances[_to]);\n        balances[_to] += _value;\n        allowed[_to][this] += _value;\n        Transfer(0x0000000000000000000000000000000000000000, _to, _value);\n        Approval(_to, this, _value);\n        return true;\n    }"
    ParameterList
       Source: "(address _to, uint256 _value)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_value"
         Type: uint256
         Source: "uint256 _value"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(bool success)"
      VariableDeclaration "success"
         Type: bool
         Source: "bool success"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(balances[_to] + _value > balances[_to]);\n        balances[_to] += _value;\n        allowed[_to][this] += _value;\n        Transfer(0x0000000000000000000000000000000000000000, _to, _value);\n        Approval(_to, this, _value);\n        return true;\n    }"
      ExpressionStatement
         Source: "require(balances[_to] + _value > balances[_to])"
        FunctionCall
           Type: tuple()
           Source: "require(balances[_to] + _value > balances[_to])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_to] + _value > balances[_to]"
            BinaryOperation using operator +
               Type: uint256
               Source: "balances[_to] + _value"
              IndexAccess
                 Type: uint256
                 Source: "balances[_to]"
                Identifier balances
                   Type: mapping(address => uint256)
                   Source: "balances"
                Identifier _to
                   Type: address
                   Source: "_to"
              Identifier _value
                 Type: uint256
                 Source: "_value"
            IndexAccess
               Type: uint256
               Source: "balances[_to]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _to
                 Type: address
                 Source: "_to"
      ExpressionStatement
         Source: "balances[_to] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "balances[_to] += _value"
          IndexAccess
             Type: uint256
             Source: "balances[_to]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _to
               Type: address
               Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "allowed[_to][this] += _value"
        Assignment using operator +=
           Type: uint256
           Source: "allowed[_to][this] += _value"
          IndexAccess
             Type: uint256
             Source: "allowed[_to][this]"
            IndexAccess
               Type: mapping(address => uint256)
               Source: "allowed[_to]"
              Identifier allowed
                 Type: mapping(address => mapping(address => uint256))
                 Source: "allowed"
              Identifier _to
                 Type: address
                 Source: "_to"
            Identifier this
               Type: contract ClickMineToken
               Source: "this"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Transfer(0x0000000000000000000000000000000000000000, _to, _value)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(0x0000000000000000000000000000000000000000, _to, _value)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Literal, token: [no token] value: 0x0000000000000000000000000000000000000000
             Type: address
             Source: "0x0000000000000000000000000000000000000000"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _value
             Type: uint256
             Source: "_value"
      ExpressionStatement
         Source: "Approval(_to, this, _value)"
        FunctionCall
           Type: tuple()
           Source: "Approval(_to, this, _value)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier this
             Type: contract ClickMineToken
             Source: "this"
          Identifier _value
             Type: uint256
             Source: "_value"
      Return
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
